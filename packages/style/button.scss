@use 'tools/fns' as *;
@use 'tools/prefix' as *;
@use 'tools/size' as size;
@use 'tools/style' as *;
@use 'var' as *;

@mixin gen-colors($name) {
  --h-button-color: #{get-css(color,$name)};

  @for $i from 1 to 7 {
    @include css-var(button-color-#{$i}, #{get-css(color,#{$name}-#{$i})});
  }

  @for $i from 1 to 6 {
    @include css-var(button-color--#{$i}, #{get-css(color,#{$name}--#{$i})});
  }
}


@mixin btn-type() {
  &[data-type='primary'] {
    background-color: get-css(button, color);
    color: white;

    &:hover:not([data-disabled]) {
      background: get-css(button, color-2);
    }

    &:active:not([data-disabled]) {
      background: get-css(button, color--1);
    }

  }

  &[data-type='link'] {
    background: transparent;
    color: get-css(button, color);
    padding: 0;

    &[data-size] {
      padding: 0;
      border-radius: 3px;
    }

    &:hover:not([data-disabled]) {
      color: get-css(button, color-2);
      background: transparent;
    }

    &:active:not([data-disabled]) {
      color: get-css(button, color--3);
      background: transparent;
    }

  }

  &[data-type='text'] {
    background: transparent;
    color: get-css(color, text);
    padding: 0;

    &:hover:not([data-disabled]) {
      color: get-css(button, color);
      background: transparent;
    }

    &:active:not([data-disabled]) {
      color: get-css(button, color--2);
      background: transparent;
    }

  }

  &[data-type='plain'] {
    color: get-css(button, color-1);
    background-color: transparent;
    border: color-mix(in srgb, #{get-css(button, color)} 20%, transparent) solid 1px;

    &:hover:not([data-disabled]) {
      background-color: color-mix(in srgb, #{get-css(button, color)} 10%, transparent);
    }

    &:active:not([data-disabled]) {
      background-color: color-mix(in srgb, #{get-css(button, color)} 30%, transparent);
    }

  }

  &[data-round] {
    aspect-ratio: 1;
    border-radius: #{$nums-max}px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

}

@mixin btn-size() {
  &[data-size='small'] {
    padding: get-css(padding, small) get-css(padding, normal);
  }

  &[data-size='normal'] {
    padding: get-css(padding, normal) get-css(padding, large);
  }

  &[data-size='large'] {
    padding: get-css(padding, normal) get-css(padding, xxl);
  }

  &[data-size='xlarge'] {
    padding: get-css(padding, xlarge) get-css(padding, 4xl);
  }
}

@mixin btn-border() {

  &[data-border] {
    border: 1px solid get-css(button, color--1);

    &[data-type='primary'] {
      border-color: get-css(button, color--2);
      border-width: 2px;
    }

    &[data-type='text'] {
      border-color: get-css(button, color-3);

      &:hover:not([data-disabled]) {
        border-color: get-css(button, color-1);
      }

      &:active:not([data-disabled]) {
        border-color: get-css(button, color--3);
      }
    }
  }

}

@mixin btn-shadow($shadow) {

  &[data-shadow='true'], &[data-shadow='always'] {
    box-shadow: $shadow;

    &[data-type='primary'] {
      box-shadow: $shadow;
    }
  }

  &[data-shadow='hover'] {
    &:hover:not([data-disabled]) {
      box-shadow: $shadow;
    }
  }

  @content
}


@include c(button) {
  @include gen-colors(primary);
  background-color: transparent;
  border: 0 none transparent;
  border-radius: get-css(radius, normal);
  box-sizing: border-box;
  color: inherit;
  @include css-prefix(user-select, none);

  &:hover:not([data-disabled]) {
    background: get-css(color, white--1);
  }

  &:active:not([data-disabled]) {
    background: get-css(color, white--3);
  }

  @include btn-type;
  @include btn-size;
  @include btn-border;

  $shadow: color-mix(in srgb, get-css(button, color--2) 60%, transparent) 0 0 5px;
  @include btn-shadow($shadow);

  & + & {
    margin-left: 12px;
  }

}

@include dark-theme {

  @include c(button) {
    &:hover {
      background: get-css(color, black-3);
    }

    &:active {
      background: get-css(color, black-4);
    }

    @include btn-type;
    @include btn-size;
    @include btn-border;

    $shadow: color-mix(in srgb, get-css(button, color--2) 70%, transparent) 0 0 5px;
    @include btn-shadow($shadow);

  }
}
